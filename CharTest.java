/*자바의 문자 자료형인 char에 대해 알아보자*/
class CharTest{
	//main 메서드는 java.exe가 호출될 때 찾아나서는 실행부 메서드이다.
	public static void main(String[] args){
		//int x=3;
		//char c='A';
		//System.out.println(c);
		
		int k=7;
		byte b=5;
		//k=b;

		//손실을 감당하고서라도 자료형의 변환을 강제하는 현상을 가리켜
		//강제 형변환이라고 한다.
		//특히 큰 자료형에서 작은 자료형으로서의 형변환의 경우
		//개발자는 작은 자료형으로의 형변환을 명시하는 cast연산자를 적용해야 한다.
		//(강제형변환 cast 연산자)
		//b=(byte)k;

		short s=17;
		byte m=6;
		
		//모든 연산자를 포함해 = 연산자도 피연산자의 자료형이 동일할 때만 동작된다.
		//따라서 아래의 연산에서도 둘 중 하나를 형변화하여 연산을 수행할 수 밖에 없는데, 이때
		//데이터의 손실이 발생하지 않아야 하므로, 작은 자료형을 큰 자료형에 맞춰 자동으로 형변환이 발생한다.
		//이러한 현상을 자동형 변환이라고 하며
		//자동 형변환은 손실이 발생하지 않기 때문에 개발자가 casting 처리를 할 필요 없이, 언어차원에서 자동으로 처리된다.
		s=m;

		boolean x=true;
		int y=9;
		x=y; //불가. 논리값에 숫자 대입은 처리 불가하므로.

		//결론, 자바의 3가지 자료형 중에서 숫자형끼리는 용량만 다를 뿐 같은 자료형이다.
		//자바 언어 뿐만 아니라, 사실상 모든 프로그래밍 언어에서 문자란 존재하지 않는다.
		// -> 모두 숫자.


		char r='V';
		char r=97; //-> char 형은 결국 문자도 아스키코드(10진수)로 변환한 뒤 다시 기계어인 2진수로 변환해 받아들이기 때문에 양수 대입이 가능하다.
		//주의) char형이 비롯 숫자형이긴 해도, 주 사용목적은 아스키, 유니코드와 같은 문자체계의 음수 아닌 숫자만을 담기 위한 목적의 자료형이므로,
		//char형으로 수치 연산에 이용하지 말자.

		//아스키 코드 > 유니코드(전세계 언어가 지원되는 업그레이드된 코드)
	}
}